// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "github.com/pasha1coil/order_data_using_nats/internal/repository/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTasks is a mock of Tasks interface.
type MockTasks struct {
	ctrl     *gomock.Controller
	recorder *MockTasksMockRecorder
}

// MockTasksMockRecorder is the mock recorder for MockTasks.
type MockTasksMockRecorder struct {
	mock *MockTasks
}

// NewMockTasks creates a new mock instance.
func NewMockTasks(ctrl *gomock.Controller) *MockTasks {
	mock := &MockTasks{ctrl: ctrl}
	mock.recorder = &MockTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasks) EXPECT() *MockTasksMockRecorder {
	return m.recorder
}

// GetAllOrders mocks base method.
func (m *MockTasks) GetAllOrders() ([]model.DbItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]model.DbItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockTasksMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockTasks)(nil).GetAllOrders))
}

// GetFromCacheByUID mocks base method.
func (m *MockTasks) GetFromCacheByUID(id string) model.OrderData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromCacheByUID", id)
	ret0, _ := ret[0].(model.OrderData)
	return ret0
}

// GetFromCacheByUID indicates an expected call of GetFromCacheByUID.
func (mr *MockTasksMockRecorder) GetFromCacheByUID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromCacheByUID", reflect.TypeOf((*MockTasks)(nil).GetFromCacheByUID), id)
}

// RestoreCache mocks base method.
func (m *MockTasks) RestoreCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreCache indicates an expected call of RestoreCache.
func (mr *MockTasksMockRecorder) RestoreCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCache", reflect.TypeOf((*MockTasks)(nil).RestoreCache))
}

// SaveOrderData mocks base method.
func (m *MockTasks) SaveOrderData(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrderData indicates an expected call of SaveOrderData.
func (mr *MockTasksMockRecorder) SaveOrderData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderData", reflect.TypeOf((*MockTasks)(nil).SaveOrderData), data)
}
