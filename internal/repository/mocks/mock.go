// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	model "github.com/pasha1coil/order_data_using_nats/internal/repository/model"

	gomock "github.com/golang/mock/gomock"
)

// MockTasksDb is a mock of TasksDb interface.
type MockTasksDb struct {
	ctrl     *gomock.Controller
	recorder *MockTasksDbMockRecorder
}

// MockTasksDbMockRecorder is the mock recorder for MockTasksDb.
type MockTasksDbMockRecorder struct {
	mock *MockTasksDb
}

// NewMockTasksDb creates a new mock instance.
func NewMockTasksDb(ctrl *gomock.Controller) *MockTasksDb {
	mock := &MockTasksDb{ctrl: ctrl}
	mock.recorder = &MockTasksDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasksDb) EXPECT() *MockTasksDbMockRecorder {
	return m.recorder
}

// GetAllOrders mocks base method.
func (m *MockTasksDb) GetAllOrders() ([]model.DbItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]model.DbItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockTasksDbMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockTasksDb)(nil).GetAllOrders))
}

// SaveOrder mocks base method.
func (m *MockTasksDb) SaveOrder(data *model.DbItem) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockTasksDbMockRecorder) SaveOrder(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockTasksDb)(nil).SaveOrder), data)
}

// MockTasksCache is a mock of TasksCache interface.
type MockTasksCache struct {
	ctrl     *gomock.Controller
	recorder *MockTasksCacheMockRecorder
}

// MockTasksCacheMockRecorder is the mock recorder for MockTasksCache.
type MockTasksCacheMockRecorder struct {
	mock *MockTasksCache
}

// NewMockTasksCache creates a new mock instance.
func NewMockTasksCache(ctrl *gomock.Controller) *MockTasksCache {
	mock := &MockTasksCache{ctrl: ctrl}
	mock.recorder = &MockTasksCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasksCache) EXPECT() *MockTasksCacheMockRecorder {
	return m.recorder
}

// AddToCache mocks base method.
func (m *MockTasksCache) AddToCache(data model.OrderData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToCache", data)
}

// AddToCache indicates an expected call of AddToCache.
func (mr *MockTasksCacheMockRecorder) AddToCache(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCache", reflect.TypeOf((*MockTasksCache)(nil).AddToCache), data)
}

// GetFromCache mocks base method.
func (m *MockTasksCache) GetFromCache(id string) model.OrderData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromCache", id)
	ret0, _ := ret[0].(model.OrderData)
	return ret0
}

// GetFromCache indicates an expected call of GetFromCache.
func (mr *MockTasksCacheMockRecorder) GetFromCache(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromCache", reflect.TypeOf((*MockTasksCache)(nil).GetFromCache), id)
}
